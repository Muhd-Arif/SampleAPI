openapi: 3.0.0
info:
  description: This is Laravel Project APis using Sanctum
  version: 1.0.0
  title: Laravel Project API's
servers:
  # - url: http://127.0.0.1:8000/api
  #   # description: Optional server description, e.g. Main (production) server
  # - url: https://127.0.0.1:8000/api
consumes:
  - application/json
  - application/xml
produces:
  - application/json
  - application/xml
  - application/pdf
tags:
  - name: Auth
    description: Manage Authentication
  - name: Product
    description: Manage Product
  - name: User
    description: Manage User
  - name: Local File
    description: Manage Local File
  - name: Database File
    description: Manage Local File
schemes:
  - "http"
  - "https"
paths:
  /api/register:
    post:
      tags:
        - Auth
      summary: Register a user to the database
      operationId: registerUser
      requestBody:
        description: User object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
  /api/login:
    post:
      tags:
        - Auth
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        description: User login credentials for login
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
        required: true
      responses:
        200:
          description: successful operation
          # headers:
          #   X-Rate-Limit:
          #     description: calls per hour allowed by the user
          #     schema:
          #       type: integer
          #       format: int32
          #   X-Expires-After:
          #     description: date in UTC when token expires
          #     schema:
          #       type: string
          #       format: date-time
          # content:
          # application/xml:
          #   schema:
          #     type: string
          # application/json:
          #   schema:
          #     type: string
        400:
          description: Invalid email/password supplied
          # content: {}
  /api/logout:
    post:
      tags:
        - Auth
      summary: Logs out current logged in user
      operationId: logoutUser
      responses:
        200:
          description: successful operation
        400:
          description: Invalid email supplied
          # content: {}
      security:
        - bearerAuth: []
  /api/forgot-password:
    post:
      tags:
        - Auth
      summary: Send forgot password email
      operationId: forgotPassword
      requestBody:
        description: User email to receive link
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid email supplied
  /api/reset-password:
    post:
      tags:
        - Auth
      summary: Reset user password
      operationId: resetPassword
      requestBody:
        description: User credential to reset password
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                password_confirmation:
                  type: string
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid credentials supplied
          # content: {}
  /api/email/verification:
    post:
      tags:
        - Auth
      summary: Send email verification to user
      operationId: emailVerification
      responses:
        200:
          description: successful operation
        400:
          description: Invalid credentials supplied
          # content: {}
      security:
        - bearerAuth: []
  /api/email/verify-email/{id}/{hash}:
    get:
      tags:
        - Auth
      summary: Verify user email
      operationId: verifyEmail
      parameters:
        - name: id
          in: "path"
          description: "id"
          required: true
          type: "string"
        - name: hash
          in: "path"
          description: "hash"
          required: true
          type: "string"
      responses:
        200:
          description: successful operation
      security:
        - bearerAuth: []
  /api/products:
    get:
      tags:
        - Product
      summary: View products
      description: View all products in the database
      operationId: viewAllProducts
      responses:
        200:
          description: successful operation
        400:
          description: Bad request
    post:
      tags:
        - Product
      summary: Create product
      description: Create new product
      operationId: createProduct
      requestBody:
        description: Product object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
      security:
        - bearerAuth: []
  /api/products/{id}:
    get:
      tags:
        - Product
      summary: View selected product
      description: View selected product based on id
      operationId: viewSelectedProduct
      parameters:
        - name: id
          in: "path"
          description: "Product id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: successful operation
        400:
          description: Invalid Id supplied
        404:
          description: Product not found
    put:
      tags:
        - Product
      summary: Update an existing product
      description: Update an existing product based on id
      operationId: updateProduct
      parameters:
        - name: id
          in: "path"
          description: "Product id"
          required: true
          type: "integer"
          format: "int64"
      requestBody:
        description: Product object that needs to be update to the database
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid Id supplied
        404:
          description: Product not found
        405:
          description: Validation exception
      x-codegen-request-body-name: body
      security:
        - bearerAuth: []
    delete:
      tags:
        - Product
      summary: Delete an existing product
      description: Delete an existing product based on id
      operationId: deleteProduct
      parameters:
        - name: id
          in: "path"
          description: "Product id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: successful operation
        400:
          description: Invalid Id supplied
        404:
          description: Product not found
        405:
          description: Validation exception
      x-codegen-request-body-name: body
      security:
        - bearerAuth: []
  /api/products/search/{name}:
    get:
      tags:
        - Product
      summary: Search Product
      description: Search Product based on name
      operationId: searchProduct
      parameters:
        - name: name
          in: "path"
          description: "Product name"
          required: true
          type: "string"
      responses:
        200:
          description: successful operation
          # content:
          #   application/json:
          #     schema:
          #       $ref: "#/components/schemas/Product"
        400:
          description: Invalid name supplied
        404:
          description: Product not found
  /api/products/random/{count}:
    get:
      tags:
        - Product
      summary: Genarate Product
      description: Genarate random products
      operationId: generateProduct
      parameters:
        - name: count
          in: "path"
          description: "Number of products"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: successful operation
        400:
          description: Bad Request
  /api/products/prices:
    get:
      tags:
        - Product
      summary: Get product prices
      description: Get all product prices and show in one dimensional array
      operationId: getPrices
      responses:
        200:
          description: successful operation
        400:
          description: Bad Request
  /api/products/prices_name:
    get:
      tags:
        - Product
      summary: Get product prices & names
      description: Get all product prices & names and show in two dimensional array
      operationId: getPricesNames
      responses:
        200:
          description: successful operation
        400:
          description: Bad Request
  /api/users:
    get:
      tags:
        - User
      summary: View users
      description: View all users in the database
      operationId: viewAllUsers
      responses:
        200:
          description: successful operation
        400:
          description: Bad request
      security:
        - bearerAuth: []
  /api/users/{id}:
    get:
      tags:
        - User
      summary: View selected user
      description: View selected user based on id
      operationId: viewSelectedUser
      parameters:
        - name: id
          in: "path"
          description: "User id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: successful operation
        400:
          description: Invalid Id supplied
        404:
          description: User not found
      security:
        - bearerAuth: []
    put:
      tags:
        - User
      summary: Update an existing user
      description: Update an existing user based on id
      operationId: updateUser
      parameters:
        - name: id
          in: "path"
          description: "User id"
          required: true
          type: "integer"
          format: "int64"
      requestBody:
        description: User object that needs to be update to the database
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid Id supplied
        404:
          description: User not found
        405:
          description: Validation exception
      x-codegen-request-body-name: body
      security:
        - bearerAuth: []
    delete:
      tags:
        - User
      summary: Delete an existing user
      description: Delete an existing user based on id
      operationId: deleteUser
      parameters:
        - name: id
          in: "path"
          description: "User id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: successful operation
        400:
          description: Invalid Id supplied
        404:
          description: User not found
        405:
          description: Validation exception
      x-codegen-request-body-name: body
      security:
        - bearerAuth: []
  /api/users/random/{count}:
    get:
      tags:
        - User
      summary: Generate Normal User
      description: Genarate random normal users
      operationId: generateUser
      parameters:
        - name: count
          in: "path"
          description: "Number of users"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: successful operation
        400:
          description: Bad Request
  /api/superadmin/random/{count}:
    get:
      tags:
        - User
      summary: Generate SuperAdmin user
      description: Genarate random superadmin users
      operationId: generateSuperAdmin
      parameters:
        - name: count
          in: "path"
          description: "Number of superadmin"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: successful operation
        400:
          description: Bad Request
  /api/users/{id}/userlevel:
    put:
      tags:
        - User
      summary: Update user level for existing user
      description: Update an existing user level based on user id
      operationId: updateUserLevel
      parameters:
        - name: id
          in: "path"
          description: "User id"
          required: true
          type: "integer"
          format: "int64"
      requestBody:
        description: User object that needs to be update to the database
        content:
          application/json:
            schema:
              type: object
              properties:
                user_level:
                  type: string
                  description: user level (superadmin/admin/normal)
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid Id supplied
        404:
          description: User not found
        405:
          description: Validation exception
      x-codegen-request-body-name: body
      security:
        - bearerAuth: []
  /api/localfiles:
    get:
      tags:
        - Local File
      summary: Viewa local files
      description: View all local files
      operationId: viewAllLocalFile
      responses:
        200:
          description: successful operation
        400:
          description: Bad Request
    post:
      tags:
        - Local File
      summary: Upload file
      description: Upload new local file
      operationId: uploadLocalFile
      requestBody:
        description: File that needs to be added
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid input
      x-codegen-request-body-name: body
  /api/localfiles/{filename}:
    get:
      tags:
        - Local File
      summary: View selected local file
      description: View selected local file based on filename
      operationId: viewSelectLocalFile
      produce: application/pdf
      parameters:
        - name: filename
          in: "path"
          description: "file name"
          required: true
          type: "string"
      responses:
        200:
          description: successful operation
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        404:
          description: File not found
    delete:
      tags:
        - Local File
      summary: Delete an existing local file
      description: Delete an existing file based on filename
      operationId: deleteFile
      parameters:
        - name: filename
          in: "path"
          description: "File name"
          required: true
          type: "string"
      responses:
        200:
          description: successful operation
        404:
          description: File not found
      x-codegen-request-body-name: body
  /api/files:
    get:
      tags:
        - Database File
      summary: View database files
      description: View all files from database
      operationId: viewAllDbFile
      responses:
        200:
          description: successful operation
        400:
          description: Bad Request
    post:
      tags:
        - Database File
      summary: Upload file
      description: Upload new file to database
      operationId: uploadDbFile
      requestBody:
        description: File details that needs to be added
        content:
          # application/json:
          #   schema:
          #     $ref: "#/components/schemas/File"
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid input
      x-codegen-request-body-name: body
  /api/files/{id}:
    get:
      tags:
        - Database File
      summary: View selected db file
      description: View selected databse file based on id
      operationId: viewSelectDbFile
      produce: application/pdf
      parameters:
        - name: id
          in: "path"
          description: "file id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: successful operation
          # content:
          #   application/pdf:
          #     schema:
          #       type: string
          #       format: binary
        404:
          description: File not found
    delete:
      tags:
        - Database File
      summary: Delete an existing db file
      description: Delete an existing database file based on id
      operationId: deleteDbFile
      parameters:
        - name: id
          in: "path"
          description: "File name"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: successful operation
        404:
          description: File not found
      x-codegen-request-body-name: body
    post:
      tags:
        - Database File
      summary: Update database file
      description: Update database file based on id
      operationId: updateDbFile
      parameters:
        - name: id
          in: "path"
          description: "File id"
          required: true
          type: "integer"
          format: "int64"
      requestBody:
        description: File object that needs to be update to the database
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
                _method:
                  type: string
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid Id supplied
        404:
          description: File not found
        405:
          description: Validation exception
      x-codegen-request-body-name: body
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: "object"
      properties:
        name:
          type: "string"
          description: "Product Name"
        slug:
          type: "string"
          description: "URL Path for Product"
        description:
          type: "string"
          description: "Product description"
        price:
          type: "integer"
          format: "double"
    User:
      type: "object"
      properties:
        name:
          type: "string"
          description: "User Name"
        email:
          type: "string"
          format: "email"
          description: "User Email"
        password:
          type: "string"
          description: "User Password"
        password_confirmation:
          type: "string"
          format: "password"
          description: "User Password Confirmation"
    LoginUser:
      type: "object"
      properties:
        email:
          type: "string"
          format: "email"
          description: "User Email"
        password:
          type: "string"
          description: "User Password"
    File:
      type: "object"
      properties:
        name:
          type: "string"
          description: "User name"
